// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/pb/backend_grpc.pb.go

// Package mock___ is a generated GoMock package.
package grpcclient

import (
	context "context"
	__ "gophKeeper/src/pb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGophKeeperClient is a mock of GophKeeperClient interface.
type MockGophKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperClientMockRecorder
}

// MockGophKeeperClientMockRecorder is the mock recorder for MockGophKeeperClient.
type MockGophKeeperClientMockRecorder struct {
	mock *MockGophKeeperClient
}

// NewMockGophKeeperClient creates a new mock instance.
func NewMockGophKeeperClient(ctrl *gomock.Controller) *MockGophKeeperClient {
	mock := &MockGophKeeperClient{ctrl: ctrl}
	mock.recorder = &MockGophKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperClient) EXPECT() *MockGophKeeperClientMockRecorder {
	return m.recorder
}

// GetCategoryHead mocks base method.
func (m *MockGophKeeperClient) GetCategoryHead(ctx context.Context, in *__.CategoryType_DTO, opts ...grpc.CallOption) (*__.CategoryHead_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCategoryHead", varargs...)
	ret0, _ := ret[0].(*__.CategoryHead_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryHead indicates an expected call of GetCategoryHead.
func (mr *MockGophKeeperClientMockRecorder) GetCategoryHead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryHead", reflect.TypeOf((*MockGophKeeperClient)(nil).GetCategoryHead), varargs...)
}

// LoadCardData mocks base method.
func (m *MockGophKeeperClient) LoadCardData(ctx context.Context, in *__.DataID_DTO, opts ...grpc.CallOption) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadCardData", varargs...)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCardData indicates an expected call of LoadCardData.
func (mr *MockGophKeeperClientMockRecorder) LoadCardData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCardData", reflect.TypeOf((*MockGophKeeperClient)(nil).LoadCardData), varargs...)
}

// LoadCredData mocks base method.
func (m *MockGophKeeperClient) LoadCredData(ctx context.Context, in *__.DataID_DTO, opts ...grpc.CallOption) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadCredData", varargs...)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCredData indicates an expected call of LoadCredData.
func (mr *MockGophKeeperClientMockRecorder) LoadCredData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCredData", reflect.TypeOf((*MockGophKeeperClient)(nil).LoadCredData), varargs...)
}

// LoadFileData mocks base method.
func (m *MockGophKeeperClient) LoadFileData(ctx context.Context, in *__.DataID_DTO, opts ...grpc.CallOption) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadFileData", varargs...)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFileData indicates an expected call of LoadFileData.
func (mr *MockGophKeeperClientMockRecorder) LoadFileData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFileData", reflect.TypeOf((*MockGophKeeperClient)(nil).LoadFileData), varargs...)
}

// LoadTextData mocks base method.
func (m *MockGophKeeperClient) LoadTextData(ctx context.Context, in *__.DataID_DTO, opts ...grpc.CallOption) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadTextData", varargs...)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTextData indicates an expected call of LoadTextData.
func (mr *MockGophKeeperClientMockRecorder) LoadTextData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTextData", reflect.TypeOf((*MockGophKeeperClient)(nil).LoadTextData), varargs...)
}

// StoreCardData mocks base method.
func (m *MockGophKeeperClient) StoreCardData(ctx context.Context, in *__.SecureData_DTO, opts ...grpc.CallOption) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreCardData", varargs...)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCardData indicates an expected call of StoreCardData.
func (mr *MockGophKeeperClientMockRecorder) StoreCardData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCardData", reflect.TypeOf((*MockGophKeeperClient)(nil).StoreCardData), varargs...)
}

// StoreCredData mocks base method.
func (m *MockGophKeeperClient) StoreCredData(ctx context.Context, in *__.SecureData_DTO, opts ...grpc.CallOption) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreCredData", varargs...)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCredData indicates an expected call of StoreCredData.
func (mr *MockGophKeeperClientMockRecorder) StoreCredData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredData", reflect.TypeOf((*MockGophKeeperClient)(nil).StoreCredData), varargs...)
}

// StoreFileData mocks base method.
func (m *MockGophKeeperClient) StoreFileData(ctx context.Context, in *__.SecureData_DTO, opts ...grpc.CallOption) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreFileData", varargs...)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreFileData indicates an expected call of StoreFileData.
func (mr *MockGophKeeperClientMockRecorder) StoreFileData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFileData", reflect.TypeOf((*MockGophKeeperClient)(nil).StoreFileData), varargs...)
}

// StoreTextData mocks base method.
func (m *MockGophKeeperClient) StoreTextData(ctx context.Context, in *__.SecureData_DTO, opts ...grpc.CallOption) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreTextData", varargs...)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreTextData indicates an expected call of StoreTextData.
func (mr *MockGophKeeperClientMockRecorder) StoreTextData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTextData", reflect.TypeOf((*MockGophKeeperClient)(nil).StoreTextData), varargs...)
}

// MockGophKeeperServer is a mock of GophKeeperServer interface.
type MockGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockGophKeeperServerMockRecorder
}

// MockGophKeeperServerMockRecorder is the mock recorder for MockGophKeeperServer.
type MockGophKeeperServerMockRecorder struct {
	mock *MockGophKeeperServer
}

// NewMockGophKeeperServer creates a new mock instance.
func NewMockGophKeeperServer(ctrl *gomock.Controller) *MockGophKeeperServer {
	mock := &MockGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophKeeperServer) EXPECT() *MockGophKeeperServerMockRecorder {
	return m.recorder
}

// GetCategoryHead mocks base method.
func (m *MockGophKeeperServer) GetCategoryHead(arg0 context.Context, arg1 *__.CategoryType_DTO) (*__.CategoryHead_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryHead", arg0, arg1)
	ret0, _ := ret[0].(*__.CategoryHead_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryHead indicates an expected call of GetCategoryHead.
func (mr *MockGophKeeperServerMockRecorder) GetCategoryHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryHead", reflect.TypeOf((*MockGophKeeperServer)(nil).GetCategoryHead), arg0, arg1)
}

// LoadCardData mocks base method.
func (m *MockGophKeeperServer) LoadCardData(arg0 context.Context, arg1 *__.DataID_DTO) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCardData", arg0, arg1)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCardData indicates an expected call of LoadCardData.
func (mr *MockGophKeeperServerMockRecorder) LoadCardData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCardData", reflect.TypeOf((*MockGophKeeperServer)(nil).LoadCardData), arg0, arg1)
}

// LoadCredData mocks base method.
func (m *MockGophKeeperServer) LoadCredData(arg0 context.Context, arg1 *__.DataID_DTO) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCredData", arg0, arg1)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCredData indicates an expected call of LoadCredData.
func (mr *MockGophKeeperServerMockRecorder) LoadCredData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCredData", reflect.TypeOf((*MockGophKeeperServer)(nil).LoadCredData), arg0, arg1)
}

// LoadFileData mocks base method.
func (m *MockGophKeeperServer) LoadFileData(arg0 context.Context, arg1 *__.DataID_DTO) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFileData", arg0, arg1)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFileData indicates an expected call of LoadFileData.
func (mr *MockGophKeeperServerMockRecorder) LoadFileData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFileData", reflect.TypeOf((*MockGophKeeperServer)(nil).LoadFileData), arg0, arg1)
}

// LoadTextData mocks base method.
func (m *MockGophKeeperServer) LoadTextData(arg0 context.Context, arg1 *__.DataID_DTO) (*__.SecureData_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTextData", arg0, arg1)
	ret0, _ := ret[0].(*__.SecureData_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTextData indicates an expected call of LoadTextData.
func (mr *MockGophKeeperServerMockRecorder) LoadTextData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTextData", reflect.TypeOf((*MockGophKeeperServer)(nil).LoadTextData), arg0, arg1)
}

// StoreCardData mocks base method.
func (m *MockGophKeeperServer) StoreCardData(arg0 context.Context, arg1 *__.SecureData_DTO) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCardData", arg0, arg1)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCardData indicates an expected call of StoreCardData.
func (mr *MockGophKeeperServerMockRecorder) StoreCardData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCardData", reflect.TypeOf((*MockGophKeeperServer)(nil).StoreCardData), arg0, arg1)
}

// StoreCredData mocks base method.
func (m *MockGophKeeperServer) StoreCredData(arg0 context.Context, arg1 *__.SecureData_DTO) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredData", arg0, arg1)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCredData indicates an expected call of StoreCredData.
func (mr *MockGophKeeperServerMockRecorder) StoreCredData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredData", reflect.TypeOf((*MockGophKeeperServer)(nil).StoreCredData), arg0, arg1)
}

// StoreFileData mocks base method.
func (m *MockGophKeeperServer) StoreFileData(arg0 context.Context, arg1 *__.SecureData_DTO) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFileData", arg0, arg1)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreFileData indicates an expected call of StoreFileData.
func (mr *MockGophKeeperServerMockRecorder) StoreFileData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFileData", reflect.TypeOf((*MockGophKeeperServer)(nil).StoreFileData), arg0, arg1)
}

// StoreTextData mocks base method.
func (m *MockGophKeeperServer) StoreTextData(arg0 context.Context, arg1 *__.SecureData_DTO) (*__.DataID_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTextData", arg0, arg1)
	ret0, _ := ret[0].(*__.DataID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreTextData indicates an expected call of StoreTextData.
func (mr *MockGophKeeperServerMockRecorder) StoreTextData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTextData", reflect.TypeOf((*MockGophKeeperServer)(nil).StoreTextData), arg0, arg1)
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}

// MockUnsafeGophKeeperServer is a mock of UnsafeGophKeeperServer interface.
type MockUnsafeGophKeeperServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGophKeeperServerMockRecorder
}

// MockUnsafeGophKeeperServerMockRecorder is the mock recorder for MockUnsafeGophKeeperServer.
type MockUnsafeGophKeeperServerMockRecorder struct {
	mock *MockUnsafeGophKeeperServer
}

// NewMockUnsafeGophKeeperServer creates a new mock instance.
func NewMockUnsafeGophKeeperServer(ctrl *gomock.Controller) *MockUnsafeGophKeeperServer {
	mock := &MockUnsafeGophKeeperServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGophKeeperServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGophKeeperServer) EXPECT() *MockUnsafeGophKeeperServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGophKeeperServer mocks base method.
func (m *MockUnsafeGophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGophKeeperServer")
}

// mustEmbedUnimplementedGophKeeperServer indicates an expected call of mustEmbedUnimplementedGophKeeperServer.
func (mr *MockUnsafeGophKeeperServerMockRecorder) mustEmbedUnimplementedGophKeeperServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGophKeeperServer", reflect.TypeOf((*MockUnsafeGophKeeperServer)(nil).mustEmbedUnimplementedGophKeeperServer))
}

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// KickOtherSession mocks base method.
func (m *MockAuthClient) KickOtherSession(ctx context.Context, in *__.Credentials, opts ...grpc.CallOption) (*__.SessionID_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KickOtherSession", varargs...)
	ret0, _ := ret[0].(*__.SessionID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickOtherSession indicates an expected call of KickOtherSession.
func (mr *MockAuthClientMockRecorder) KickOtherSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickOtherSession", reflect.TypeOf((*MockAuthClient)(nil).KickOtherSession), varargs...)
}

// Login mocks base method.
func (m *MockAuthClient) Login(ctx context.Context, in *__.Credentials, opts ...grpc.CallOption) (*__.SessionID_DTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*__.SessionID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthClient)(nil).Login), varargs...)
}

// Ping mocks base method.
func (m *MockAuthClient) Ping(ctx context.Context, in *__.Empty, opts ...grpc.CallOption) (*__.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*__.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAuthClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAuthClient)(nil).Ping), varargs...)
}

// Register mocks base method.
func (m *MockAuthClient) Register(ctx context.Context, in *__.Credentials, opts ...grpc.CallOption) (*__.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*__.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthClient)(nil).Register), varargs...)
}

// MockAuthServer is a mock of AuthServer interface.
type MockAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServerMockRecorder
}

// MockAuthServerMockRecorder is the mock recorder for MockAuthServer.
type MockAuthServerMockRecorder struct {
	mock *MockAuthServer
}

// NewMockAuthServer creates a new mock instance.
func NewMockAuthServer(ctrl *gomock.Controller) *MockAuthServer {
	mock := &MockAuthServer{ctrl: ctrl}
	mock.recorder = &MockAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServer) EXPECT() *MockAuthServerMockRecorder {
	return m.recorder
}

// KickOtherSession mocks base method.
func (m *MockAuthServer) KickOtherSession(arg0 context.Context, arg1 *__.Credentials) (*__.SessionID_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickOtherSession", arg0, arg1)
	ret0, _ := ret[0].(*__.SessionID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickOtherSession indicates an expected call of KickOtherSession.
func (mr *MockAuthServerMockRecorder) KickOtherSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickOtherSession", reflect.TypeOf((*MockAuthServer)(nil).KickOtherSession), arg0, arg1)
}

// Login mocks base method.
func (m *MockAuthServer) Login(arg0 context.Context, arg1 *__.Credentials) (*__.SessionID_DTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*__.SessionID_DTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServer)(nil).Login), arg0, arg1)
}

// Ping mocks base method.
func (m *MockAuthServer) Ping(arg0 context.Context, arg1 *__.Empty) (*__.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*__.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAuthServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAuthServer)(nil).Ping), arg0, arg1)
}

// Register mocks base method.
func (m *MockAuthServer) Register(arg0 context.Context, arg1 *__.Credentials) (*__.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*__.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServer)(nil).Register), arg0, arg1)
}

// mustEmbedUnimplementedAuthServer mocks base method.
func (m *MockAuthServer) mustEmbedUnimplementedAuthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServer")
}

// mustEmbedUnimplementedAuthServer indicates an expected call of mustEmbedUnimplementedAuthServer.
func (mr *MockAuthServerMockRecorder) mustEmbedUnimplementedAuthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServer", reflect.TypeOf((*MockAuthServer)(nil).mustEmbedUnimplementedAuthServer))
}

// MockUnsafeAuthServer is a mock of UnsafeAuthServer interface.
type MockUnsafeAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServerMockRecorder
}

// MockUnsafeAuthServerMockRecorder is the mock recorder for MockUnsafeAuthServer.
type MockUnsafeAuthServerMockRecorder struct {
	mock *MockUnsafeAuthServer
}

// NewMockUnsafeAuthServer creates a new mock instance.
func NewMockUnsafeAuthServer(ctrl *gomock.Controller) *MockUnsafeAuthServer {
	mock := &MockUnsafeAuthServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServer) EXPECT() *MockUnsafeAuthServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServer mocks base method.
func (m *MockUnsafeAuthServer) mustEmbedUnimplementedAuthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServer")
}

// mustEmbedUnimplementedAuthServer indicates an expected call of mustEmbedUnimplementedAuthServer.
func (mr *MockUnsafeAuthServerMockRecorder) mustEmbedUnimplementedAuthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServer", reflect.TypeOf((*MockUnsafeAuthServer)(nil).mustEmbedUnimplementedAuthServer))
}
