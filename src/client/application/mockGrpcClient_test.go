// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/client/grpcClient/grpcClient.go

// Package mock_grpcclient is a generated GoMock package.
package application

import (
	context "context"
	grpcclient "gophKeeper/src/client/grpcClient"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGRPCWrapper is a mock of GRPCWrapper interface.
type MockGRPCWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCWrapperMockRecorder
}

// MockGRPCWrapperMockRecorder is the mock recorder for MockGRPCWrapper.
type MockGRPCWrapperMockRecorder struct {
	mock *MockGRPCWrapper
}

// NewMockGRPCWrapper creates a new mock instance.
func NewMockGRPCWrapper(ctrl *gomock.Controller) *MockGRPCWrapper {
	mock := &MockGRPCWrapper{ctrl: ctrl}
	mock.recorder = &MockGRPCWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCWrapper) EXPECT() *MockGRPCWrapperMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockGRPCWrapper) Authenticate(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, req, reply, cc, invoker}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockGRPCWrapperMockRecorder) Authenticate(ctx, method, req, reply, cc, invoker interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, req, reply, cc, invoker}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockGRPCWrapper)(nil).Authenticate), varargs...)
}

// GetCategoryHead mocks base method.
func (m *MockGRPCWrapper) GetCategoryHead(ctx context.Context, category grpcclient.Category) ([]*grpcclient.CategoryEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryHead", ctx, category)
	ret0, _ := ret[0].([]*grpcclient.CategoryEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryHead indicates an expected call of GetCategoryHead.
func (mr *MockGRPCWrapperMockRecorder) GetCategoryHead(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryHead", reflect.TypeOf((*MockGRPCWrapper)(nil).GetCategoryHead), ctx, category)
}

// KickOtherSession mocks base method.
func (m *MockGRPCWrapper) KickOtherSession(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickOtherSession", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// KickOtherSession indicates an expected call of KickOtherSession.
func (mr *MockGRPCWrapperMockRecorder) KickOtherSession(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickOtherSession", reflect.TypeOf((*MockGRPCWrapper)(nil).KickOtherSession), ctx, login, password)
}

// LoadCardData mocks base method.
func (m *MockGRPCWrapper) LoadCardData(ctx context.Context, dataID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCardData", ctx, dataID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCardData indicates an expected call of LoadCardData.
func (mr *MockGRPCWrapperMockRecorder) LoadCardData(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCardData", reflect.TypeOf((*MockGRPCWrapper)(nil).LoadCardData), ctx, dataID)
}

// LoadCredData mocks base method.
func (m *MockGRPCWrapper) LoadCredData(ctx context.Context, dataID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCredData", ctx, dataID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCredData indicates an expected call of LoadCredData.
func (mr *MockGRPCWrapperMockRecorder) LoadCredData(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCredData", reflect.TypeOf((*MockGRPCWrapper)(nil).LoadCredData), ctx, dataID)
}

// LoadFileData mocks base method.
func (m *MockGRPCWrapper) LoadFileData(ctx context.Context, dataID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFileData", ctx, dataID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFileData indicates an expected call of LoadFileData.
func (mr *MockGRPCWrapperMockRecorder) LoadFileData(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFileData", reflect.TypeOf((*MockGRPCWrapper)(nil).LoadFileData), ctx, dataID)
}

// LoadTextData mocks base method.
func (m *MockGRPCWrapper) LoadTextData(ctx context.Context, dataID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTextData", ctx, dataID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTextData indicates an expected call of LoadTextData.
func (mr *MockGRPCWrapperMockRecorder) LoadTextData(ctx, dataID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTextData", reflect.TypeOf((*MockGRPCWrapper)(nil).LoadTextData), ctx, dataID)
}

// Login mocks base method.
func (m *MockGRPCWrapper) Login(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockGRPCWrapperMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGRPCWrapper)(nil).Login), ctx, login, password)
}

// Ping mocks base method.
func (m *MockGRPCWrapper) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockGRPCWrapperMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockGRPCWrapper)(nil).Ping), ctx)
}

// Register mocks base method.
func (m *MockGRPCWrapper) Register(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockGRPCWrapperMockRecorder) Register(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGRPCWrapper)(nil).Register), ctx, login, password)
}

// StoreCardData mocks base method.
func (m *MockGRPCWrapper) StoreCardData(ctx context.Context, data []byte, meta string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCardData", ctx, data, meta)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StoreCardData indicates an expected call of StoreCardData.
func (mr *MockGRPCWrapperMockRecorder) StoreCardData(ctx, data, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCardData", reflect.TypeOf((*MockGRPCWrapper)(nil).StoreCardData), ctx, data, meta)
}

// StoreCredData mocks base method.
func (m *MockGRPCWrapper) StoreCredData(ctx context.Context, data []byte, meta string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredData", ctx, data, meta)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StoreCredData indicates an expected call of StoreCredData.
func (mr *MockGRPCWrapperMockRecorder) StoreCredData(ctx, data, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredData", reflect.TypeOf((*MockGRPCWrapper)(nil).StoreCredData), ctx, data, meta)
}

// StoreFileData mocks base method.
func (m *MockGRPCWrapper) StoreFileData(ctx context.Context, data []byte, meta string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFileData", ctx, data, meta)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StoreFileData indicates an expected call of StoreFileData.
func (mr *MockGRPCWrapperMockRecorder) StoreFileData(ctx, data, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFileData", reflect.TypeOf((*MockGRPCWrapper)(nil).StoreFileData), ctx, data, meta)
}

// StoreTextData mocks base method.
func (m *MockGRPCWrapper) StoreTextData(ctx context.Context, data []byte, meta string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTextData", ctx, data, meta)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StoreTextData indicates an expected call of StoreTextData.
func (mr *MockGRPCWrapperMockRecorder) StoreTextData(ctx, data, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTextData", reflect.TypeOf((*MockGRPCWrapper)(nil).StoreTextData), ctx, data, meta)
}
